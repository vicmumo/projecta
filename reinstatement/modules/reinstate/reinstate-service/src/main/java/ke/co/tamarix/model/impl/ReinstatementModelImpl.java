/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ke.co.tamarix.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import ke.co.tamarix.model.Reinstatement;
import ke.co.tamarix.model.ReinstatementModel;
import ke.co.tamarix.model.ReinstatementSoap;

/**
 * The base model implementation for the Reinstatement service. Represents a row in the &quot;Reinstatement_Reinstatement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReinstatementModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReinstatementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReinstatementImpl
 * @generated
 */
@JSON(strict = true)
public class ReinstatementModelImpl
	extends BaseModelImpl<Reinstatement> implements ReinstatementModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reinstatement model instance should use the <code>Reinstatement</code> interface instead.
	 */
	public static final String TABLE_NAME = "Reinstatement_Reinstatement";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"reinstatementId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createdby", Types.BIGINT}, {"modifiedby", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"branchName", Types.VARCHAR}, {"payrollNo", Types.VARCHAR},
		{"terminationReason", Types.VARCHAR},
		{"terminationCode", Types.VARCHAR}, {"formerBranch", Types.VARCHAR},
		{"contractId", Types.VARCHAR}, {"entityId", Types.VARCHAR},
		{"approvalDate", Types.VARCHAR}, {"comments", Types.VARCHAR},
		{"approverContractNumber", Types.VARCHAR},
		{"agentVerdict", Types.VARCHAR}, {"agentAction", Types.VARCHAR},
		{"processedFlag", Types.VARCHAR}, {"errorReason", Types.VARCHAR},
		{"assignmentStatus", Types.VARCHAR}, {"capacity", Types.VARCHAR},
		{"positionId", Types.VARCHAR}, {"orgId", Types.VARCHAR},
		{"historyStartDate", Types.VARCHAR}, {"oldOrgId", Types.VARCHAR},
		{"oldPositionId", Types.VARCHAR},
		{"contractEffectiveEndDate", Types.VARCHAR},
		{"applicationTye", Types.VARCHAR},
		{"applicationCategory", Types.VARCHAR},
		{"firstapprover", Types.VARCHAR}, {"secondapprover", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reinstatementId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payrollNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("terminationReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("terminationCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formerBranch", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approvalDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approverContractNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agentVerdict", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agentAction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processedFlag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorReason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignmentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("positionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("historyStartDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oldOrgId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oldPositionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractEffectiveEndDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationTye", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstapprover", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondapprover", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Reinstatement_Reinstatement (uuid_ VARCHAR(75) null,reinstatementId LONG not null primary key,groupId LONG,companyId LONG,createdby LONG,modifiedby VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,branchName VARCHAR(75) null,payrollNo VARCHAR(75) null,terminationReason VARCHAR(75) null,terminationCode VARCHAR(75) null,formerBranch VARCHAR(75) null,contractId VARCHAR(75) null,entityId VARCHAR(75) null,approvalDate VARCHAR(75) null,comments VARCHAR(75) null,approverContractNumber VARCHAR(75) null,agentVerdict VARCHAR(75) null,agentAction VARCHAR(75) null,processedFlag VARCHAR(75) null,errorReason VARCHAR(75) null,assignmentStatus VARCHAR(75) null,capacity VARCHAR(75) null,positionId VARCHAR(75) null,orgId VARCHAR(75) null,historyStartDate VARCHAR(75) null,oldOrgId VARCHAR(75) null,oldPositionId VARCHAR(75) null,contractEffectiveEndDate VARCHAR(75) null,applicationTye VARCHAR(75) null,applicationCategory VARCHAR(75) null,firstapprover VARCHAR(75) null,secondapprover VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Reinstatement_Reinstatement";

	public static final String ORDER_BY_JPQL =
		" ORDER BY reinstatement.reinstatementId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Reinstatement_Reinstatement.reinstatementId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		ke.co.tamarix.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.ke.co.tamarix.model.Reinstatement"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		ke.co.tamarix.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.ke.co.tamarix.model.Reinstatement"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		ke.co.tamarix.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.ke.co.tamarix.model.Reinstatement"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long REINSTATEMENTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Reinstatement toModel(ReinstatementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Reinstatement model = new ReinstatementImpl();

		model.setUuid(soapModel.getUuid());
		model.setReinstatementId(soapModel.getReinstatementId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedby(soapModel.getCreatedby());
		model.setModifiedby(soapModel.getModifiedby());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setBranchName(soapModel.getBranchName());
		model.setPayrollNo(soapModel.getPayrollNo());
		model.setTerminationReason(soapModel.getTerminationReason());
		model.setTerminationCode(soapModel.getTerminationCode());
		model.setFormerBranch(soapModel.getFormerBranch());
		model.setContractId(soapModel.getContractId());
		model.setEntityId(soapModel.getEntityId());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setComments(soapModel.getComments());
		model.setApproverContractNumber(soapModel.getApproverContractNumber());
		model.setAgentVerdict(soapModel.getAgentVerdict());
		model.setAgentAction(soapModel.getAgentAction());
		model.setProcessedFlag(soapModel.getProcessedFlag());
		model.setErrorReason(soapModel.getErrorReason());
		model.setAssignmentStatus(soapModel.getAssignmentStatus());
		model.setCapacity(soapModel.getCapacity());
		model.setPositionId(soapModel.getPositionId());
		model.setOrgId(soapModel.getOrgId());
		model.setHistoryStartDate(soapModel.getHistoryStartDate());
		model.setOldOrgId(soapModel.getOldOrgId());
		model.setOldPositionId(soapModel.getOldPositionId());
		model.setContractEffectiveEndDate(
			soapModel.getContractEffectiveEndDate());
		model.setApplicationTye(soapModel.getApplicationTye());
		model.setApplicationCategory(soapModel.getApplicationCategory());
		model.setFirstapprover(soapModel.getFirstapprover());
		model.setSecondapprover(soapModel.getSecondapprover());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Reinstatement> toModels(ReinstatementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Reinstatement> models = new ArrayList<Reinstatement>(
			soapModels.length);

		for (ReinstatementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		ke.co.tamarix.service.util.ServiceProps.get(
			"lock.expiration.time.ke.co.tamarix.model.Reinstatement"));

	public ReinstatementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reinstatementId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReinstatementId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reinstatementId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Reinstatement.class;
	}

	@Override
	public String getModelClassName() {
		return Reinstatement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Reinstatement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Reinstatement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reinstatement, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Reinstatement)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Reinstatement, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Reinstatement, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Reinstatement)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Reinstatement, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Reinstatement, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Reinstatement>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Reinstatement.class.getClassLoader(), Reinstatement.class,
			ModelWrapper.class);

		try {
			Constructor<Reinstatement> constructor =
				(Constructor<Reinstatement>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Reinstatement, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Reinstatement, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Reinstatement, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Reinstatement, Object>>();
		Map<String, BiConsumer<Reinstatement, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Reinstatement, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object uuidObject) {

					reinstatement.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"reinstatementId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getReinstatementId();
				}

			});
		attributeSetterBiConsumers.put(
			"reinstatementId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object reinstatementIdObject) {

					reinstatement.setReinstatementId(
						(Long)reinstatementIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object groupIdObject) {

					reinstatement.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object companyIdObject) {

					reinstatement.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"createdby",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getCreatedby();
				}

			});
		attributeSetterBiConsumers.put(
			"createdby",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object createdbyObject) {

					reinstatement.setCreatedby((Long)createdbyObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedby",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getModifiedby();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedby",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object modifiedbyObject) {

					reinstatement.setModifiedby((String)modifiedbyObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object createDateObject) {

					reinstatement.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object modifiedDateObject) {

					reinstatement.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"firstName",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getFirstName();
				}

			});
		attributeSetterBiConsumers.put(
			"firstName",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object firstNameObject) {

					reinstatement.setFirstName((String)firstNameObject);
				}

			});
		attributeGetterFunctions.put(
			"lastName",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getLastName();
				}

			});
		attributeSetterBiConsumers.put(
			"lastName",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object lastNameObject) {

					reinstatement.setLastName((String)lastNameObject);
				}

			});
		attributeGetterFunctions.put(
			"branchName",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getBranchName();
				}

			});
		attributeSetterBiConsumers.put(
			"branchName",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object branchNameObject) {

					reinstatement.setBranchName((String)branchNameObject);
				}

			});
		attributeGetterFunctions.put(
			"payrollNo",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getPayrollNo();
				}

			});
		attributeSetterBiConsumers.put(
			"payrollNo",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object payrollNoObject) {

					reinstatement.setPayrollNo((String)payrollNoObject);
				}

			});
		attributeGetterFunctions.put(
			"terminationReason",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getTerminationReason();
				}

			});
		attributeSetterBiConsumers.put(
			"terminationReason",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object terminationReasonObject) {

					reinstatement.setTerminationReason(
						(String)terminationReasonObject);
				}

			});
		attributeGetterFunctions.put(
			"terminationCode",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getTerminationCode();
				}

			});
		attributeSetterBiConsumers.put(
			"terminationCode",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object terminationCodeObject) {

					reinstatement.setTerminationCode(
						(String)terminationCodeObject);
				}

			});
		attributeGetterFunctions.put(
			"formerBranch",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getFormerBranch();
				}

			});
		attributeSetterBiConsumers.put(
			"formerBranch",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object formerBranchObject) {

					reinstatement.setFormerBranch((String)formerBranchObject);
				}

			});
		attributeGetterFunctions.put(
			"contractId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getContractId();
				}

			});
		attributeSetterBiConsumers.put(
			"contractId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object contractIdObject) {

					reinstatement.setContractId((String)contractIdObject);
				}

			});
		attributeGetterFunctions.put(
			"entityId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getEntityId();
				}

			});
		attributeSetterBiConsumers.put(
			"entityId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object entityIdObject) {

					reinstatement.setEntityId((String)entityIdObject);
				}

			});
		attributeGetterFunctions.put(
			"approvalDate",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getApprovalDate();
				}

			});
		attributeSetterBiConsumers.put(
			"approvalDate",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object approvalDateObject) {

					reinstatement.setApprovalDate((String)approvalDateObject);
				}

			});
		attributeGetterFunctions.put(
			"comments",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getComments();
				}

			});
		attributeSetterBiConsumers.put(
			"comments",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object commentsObject) {

					reinstatement.setComments((String)commentsObject);
				}

			});
		attributeGetterFunctions.put(
			"approverContractNumber",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getApproverContractNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"approverContractNumber",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object approverContractNumberObject) {

					reinstatement.setApproverContractNumber(
						(String)approverContractNumberObject);
				}

			});
		attributeGetterFunctions.put(
			"agentVerdict",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getAgentVerdict();
				}

			});
		attributeSetterBiConsumers.put(
			"agentVerdict",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object agentVerdictObject) {

					reinstatement.setAgentVerdict((String)agentVerdictObject);
				}

			});
		attributeGetterFunctions.put(
			"agentAction",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getAgentAction();
				}

			});
		attributeSetterBiConsumers.put(
			"agentAction",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object agentActionObject) {

					reinstatement.setAgentAction((String)agentActionObject);
				}

			});
		attributeGetterFunctions.put(
			"processedFlag",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getProcessedFlag();
				}

			});
		attributeSetterBiConsumers.put(
			"processedFlag",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object processedFlagObject) {

					reinstatement.setProcessedFlag((String)processedFlagObject);
				}

			});
		attributeGetterFunctions.put(
			"errorReason",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getErrorReason();
				}

			});
		attributeSetterBiConsumers.put(
			"errorReason",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object errorReasonObject) {

					reinstatement.setErrorReason((String)errorReasonObject);
				}

			});
		attributeGetterFunctions.put(
			"assignmentStatus",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getAssignmentStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"assignmentStatus",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object assignmentStatusObject) {

					reinstatement.setAssignmentStatus(
						(String)assignmentStatusObject);
				}

			});
		attributeGetterFunctions.put(
			"capacity",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getCapacity();
				}

			});
		attributeSetterBiConsumers.put(
			"capacity",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object capacityObject) {

					reinstatement.setCapacity((String)capacityObject);
				}

			});
		attributeGetterFunctions.put(
			"positionId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getPositionId();
				}

			});
		attributeSetterBiConsumers.put(
			"positionId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object positionIdObject) {

					reinstatement.setPositionId((String)positionIdObject);
				}

			});
		attributeGetterFunctions.put(
			"orgId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getOrgId();
				}

			});
		attributeSetterBiConsumers.put(
			"orgId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object orgIdObject) {

					reinstatement.setOrgId((String)orgIdObject);
				}

			});
		attributeGetterFunctions.put(
			"historyStartDate",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getHistoryStartDate();
				}

			});
		attributeSetterBiConsumers.put(
			"historyStartDate",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object historyStartDateObject) {

					reinstatement.setHistoryStartDate(
						(String)historyStartDateObject);
				}

			});
		attributeGetterFunctions.put(
			"oldOrgId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getOldOrgId();
				}

			});
		attributeSetterBiConsumers.put(
			"oldOrgId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object oldOrgIdObject) {

					reinstatement.setOldOrgId((String)oldOrgIdObject);
				}

			});
		attributeGetterFunctions.put(
			"oldPositionId",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getOldPositionId();
				}

			});
		attributeSetterBiConsumers.put(
			"oldPositionId",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object oldPositionIdObject) {

					reinstatement.setOldPositionId((String)oldPositionIdObject);
				}

			});
		attributeGetterFunctions.put(
			"contractEffectiveEndDate",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getContractEffectiveEndDate();
				}

			});
		attributeSetterBiConsumers.put(
			"contractEffectiveEndDate",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object contractEffectiveEndDateObject) {

					reinstatement.setContractEffectiveEndDate(
						(String)contractEffectiveEndDateObject);
				}

			});
		attributeGetterFunctions.put(
			"applicationTye",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getApplicationTye();
				}

			});
		attributeSetterBiConsumers.put(
			"applicationTye",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object applicationTyeObject) {

					reinstatement.setApplicationTye(
						(String)applicationTyeObject);
				}

			});
		attributeGetterFunctions.put(
			"applicationCategory",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getApplicationCategory();
				}

			});
		attributeSetterBiConsumers.put(
			"applicationCategory",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement,
					Object applicationCategoryObject) {

					reinstatement.setApplicationCategory(
						(String)applicationCategoryObject);
				}

			});
		attributeGetterFunctions.put(
			"firstapprover",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getFirstapprover();
				}

			});
		attributeSetterBiConsumers.put(
			"firstapprover",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object firstapproverObject) {

					reinstatement.setFirstapprover((String)firstapproverObject);
				}

			});
		attributeGetterFunctions.put(
			"secondapprover",
			new Function<Reinstatement, Object>() {

				@Override
				public Object apply(Reinstatement reinstatement) {
					return reinstatement.getSecondapprover();
				}

			});
		attributeSetterBiConsumers.put(
			"secondapprover",
			new BiConsumer<Reinstatement, Object>() {

				@Override
				public void accept(
					Reinstatement reinstatement, Object secondapproverObject) {

					reinstatement.setSecondapprover(
						(String)secondapproverObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getReinstatementId() {
		return _reinstatementId;
	}

	@Override
	public void setReinstatementId(long reinstatementId) {
		_reinstatementId = reinstatementId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@JSON
	@Override
	public String getModifiedby() {
		if (_modifiedby == null) {
			return "";
		}
		else {
			return _modifiedby;
		}
	}

	@Override
	public void setModifiedby(String modifiedby) {
		_modifiedby = modifiedby;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		_branchName = branchName;
	}

	@JSON
	@Override
	public String getPayrollNo() {
		if (_payrollNo == null) {
			return "";
		}
		else {
			return _payrollNo;
		}
	}

	@Override
	public void setPayrollNo(String payrollNo) {
		_payrollNo = payrollNo;
	}

	@JSON
	@Override
	public String getTerminationReason() {
		if (_terminationReason == null) {
			return "";
		}
		else {
			return _terminationReason;
		}
	}

	@Override
	public void setTerminationReason(String terminationReason) {
		_terminationReason = terminationReason;
	}

	@JSON
	@Override
	public String getTerminationCode() {
		if (_terminationCode == null) {
			return "";
		}
		else {
			return _terminationCode;
		}
	}

	@Override
	public void setTerminationCode(String terminationCode) {
		_terminationCode = terminationCode;
	}

	@JSON
	@Override
	public String getFormerBranch() {
		if (_formerBranch == null) {
			return "";
		}
		else {
			return _formerBranch;
		}
	}

	@Override
	public void setFormerBranch(String formerBranch) {
		_formerBranch = formerBranch;
	}

	@JSON
	@Override
	public String getContractId() {
		if (_contractId == null) {
			return "";
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@JSON
	@Override
	public String getEntityId() {
		if (_entityId == null) {
			return "";
		}
		else {
			return _entityId;
		}
	}

	@Override
	public void setEntityId(String entityId) {
		_entityId = entityId;
	}

	@JSON
	@Override
	public String getApprovalDate() {
		if (_approvalDate == null) {
			return "";
		}
		else {
			return _approvalDate;
		}
	}

	@Override
	public void setApprovalDate(String approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getApproverContractNumber() {
		if (_approverContractNumber == null) {
			return "";
		}
		else {
			return _approverContractNumber;
		}
	}

	@Override
	public void setApproverContractNumber(String approverContractNumber) {
		_approverContractNumber = approverContractNumber;
	}

	@JSON
	@Override
	public String getAgentVerdict() {
		if (_agentVerdict == null) {
			return "";
		}
		else {
			return _agentVerdict;
		}
	}

	@Override
	public void setAgentVerdict(String agentVerdict) {
		_agentVerdict = agentVerdict;
	}

	@JSON
	@Override
	public String getAgentAction() {
		if (_agentAction == null) {
			return "";
		}
		else {
			return _agentAction;
		}
	}

	@Override
	public void setAgentAction(String agentAction) {
		_agentAction = agentAction;
	}

	@JSON
	@Override
	public String getProcessedFlag() {
		if (_processedFlag == null) {
			return "";
		}
		else {
			return _processedFlag;
		}
	}

	@Override
	public void setProcessedFlag(String processedFlag) {
		_processedFlag = processedFlag;
	}

	@JSON
	@Override
	public String getErrorReason() {
		if (_errorReason == null) {
			return "";
		}
		else {
			return _errorReason;
		}
	}

	@Override
	public void setErrorReason(String errorReason) {
		_errorReason = errorReason;
	}

	@JSON
	@Override
	public String getAssignmentStatus() {
		if (_assignmentStatus == null) {
			return "";
		}
		else {
			return _assignmentStatus;
		}
	}

	@Override
	public void setAssignmentStatus(String assignmentStatus) {
		_assignmentStatus = assignmentStatus;
	}

	@JSON
	@Override
	public String getCapacity() {
		if (_capacity == null) {
			return "";
		}
		else {
			return _capacity;
		}
	}

	@Override
	public void setCapacity(String capacity) {
		_capacity = capacity;
	}

	@JSON
	@Override
	public String getPositionId() {
		if (_positionId == null) {
			return "";
		}
		else {
			return _positionId;
		}
	}

	@Override
	public void setPositionId(String positionId) {
		_positionId = positionId;
	}

	@JSON
	@Override
	public String getOrgId() {
		if (_orgId == null) {
			return "";
		}
		else {
			return _orgId;
		}
	}

	@Override
	public void setOrgId(String orgId) {
		_orgId = orgId;
	}

	@JSON
	@Override
	public String getHistoryStartDate() {
		if (_historyStartDate == null) {
			return "";
		}
		else {
			return _historyStartDate;
		}
	}

	@Override
	public void setHistoryStartDate(String historyStartDate) {
		_historyStartDate = historyStartDate;
	}

	@JSON
	@Override
	public String getOldOrgId() {
		if (_oldOrgId == null) {
			return "";
		}
		else {
			return _oldOrgId;
		}
	}

	@Override
	public void setOldOrgId(String oldOrgId) {
		_oldOrgId = oldOrgId;
	}

	@JSON
	@Override
	public String getOldPositionId() {
		if (_oldPositionId == null) {
			return "";
		}
		else {
			return _oldPositionId;
		}
	}

	@Override
	public void setOldPositionId(String oldPositionId) {
		_oldPositionId = oldPositionId;
	}

	@JSON
	@Override
	public String getContractEffectiveEndDate() {
		if (_contractEffectiveEndDate == null) {
			return "";
		}
		else {
			return _contractEffectiveEndDate;
		}
	}

	@Override
	public void setContractEffectiveEndDate(String contractEffectiveEndDate) {
		_contractEffectiveEndDate = contractEffectiveEndDate;
	}

	@JSON
	@Override
	public String getApplicationTye() {
		if (_applicationTye == null) {
			return "";
		}
		else {
			return _applicationTye;
		}
	}

	@Override
	public void setApplicationTye(String applicationTye) {
		_applicationTye = applicationTye;
	}

	@JSON
	@Override
	public String getApplicationCategory() {
		if (_applicationCategory == null) {
			return "";
		}
		else {
			return _applicationCategory;
		}
	}

	@Override
	public void setApplicationCategory(String applicationCategory) {
		_applicationCategory = applicationCategory;
	}

	@JSON
	@Override
	public String getFirstapprover() {
		if (_firstapprover == null) {
			return "";
		}
		else {
			return _firstapprover;
		}
	}

	@Override
	public void setFirstapprover(String firstapprover) {
		_firstapprover = firstapprover;
	}

	@JSON
	@Override
	public String getSecondapprover() {
		if (_secondapprover == null) {
			return "";
		}
		else {
			return _secondapprover;
		}
	}

	@Override
	public void setSecondapprover(String secondapprover) {
		_secondapprover = secondapprover;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Reinstatement.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Reinstatement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Reinstatement toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Reinstatement>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReinstatementImpl reinstatementImpl = new ReinstatementImpl();

		reinstatementImpl.setUuid(getUuid());
		reinstatementImpl.setReinstatementId(getReinstatementId());
		reinstatementImpl.setGroupId(getGroupId());
		reinstatementImpl.setCompanyId(getCompanyId());
		reinstatementImpl.setCreatedby(getCreatedby());
		reinstatementImpl.setModifiedby(getModifiedby());
		reinstatementImpl.setCreateDate(getCreateDate());
		reinstatementImpl.setModifiedDate(getModifiedDate());
		reinstatementImpl.setFirstName(getFirstName());
		reinstatementImpl.setLastName(getLastName());
		reinstatementImpl.setBranchName(getBranchName());
		reinstatementImpl.setPayrollNo(getPayrollNo());
		reinstatementImpl.setTerminationReason(getTerminationReason());
		reinstatementImpl.setTerminationCode(getTerminationCode());
		reinstatementImpl.setFormerBranch(getFormerBranch());
		reinstatementImpl.setContractId(getContractId());
		reinstatementImpl.setEntityId(getEntityId());
		reinstatementImpl.setApprovalDate(getApprovalDate());
		reinstatementImpl.setComments(getComments());
		reinstatementImpl.setApproverContractNumber(
			getApproverContractNumber());
		reinstatementImpl.setAgentVerdict(getAgentVerdict());
		reinstatementImpl.setAgentAction(getAgentAction());
		reinstatementImpl.setProcessedFlag(getProcessedFlag());
		reinstatementImpl.setErrorReason(getErrorReason());
		reinstatementImpl.setAssignmentStatus(getAssignmentStatus());
		reinstatementImpl.setCapacity(getCapacity());
		reinstatementImpl.setPositionId(getPositionId());
		reinstatementImpl.setOrgId(getOrgId());
		reinstatementImpl.setHistoryStartDate(getHistoryStartDate());
		reinstatementImpl.setOldOrgId(getOldOrgId());
		reinstatementImpl.setOldPositionId(getOldPositionId());
		reinstatementImpl.setContractEffectiveEndDate(
			getContractEffectiveEndDate());
		reinstatementImpl.setApplicationTye(getApplicationTye());
		reinstatementImpl.setApplicationCategory(getApplicationCategory());
		reinstatementImpl.setFirstapprover(getFirstapprover());
		reinstatementImpl.setSecondapprover(getSecondapprover());

		reinstatementImpl.resetOriginalValues();

		return reinstatementImpl;
	}

	@Override
	public int compareTo(Reinstatement reinstatement) {
		long primaryKey = reinstatement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Reinstatement)) {
			return false;
		}

		Reinstatement reinstatement = (Reinstatement)obj;

		long primaryKey = reinstatement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ReinstatementModelImpl reinstatementModelImpl = this;

		reinstatementModelImpl._originalUuid = reinstatementModelImpl._uuid;

		reinstatementModelImpl._originalGroupId =
			reinstatementModelImpl._groupId;

		reinstatementModelImpl._setOriginalGroupId = false;

		reinstatementModelImpl._originalCompanyId =
			reinstatementModelImpl._companyId;

		reinstatementModelImpl._setOriginalCompanyId = false;

		reinstatementModelImpl._setModifiedDate = false;

		reinstatementModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Reinstatement> toCacheModel() {
		ReinstatementCacheModel reinstatementCacheModel =
			new ReinstatementCacheModel();

		reinstatementCacheModel.uuid = getUuid();

		String uuid = reinstatementCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			reinstatementCacheModel.uuid = null;
		}

		reinstatementCacheModel.reinstatementId = getReinstatementId();

		reinstatementCacheModel.groupId = getGroupId();

		reinstatementCacheModel.companyId = getCompanyId();

		reinstatementCacheModel.createdby = getCreatedby();

		reinstatementCacheModel.modifiedby = getModifiedby();

		String modifiedby = reinstatementCacheModel.modifiedby;

		if ((modifiedby != null) && (modifiedby.length() == 0)) {
			reinstatementCacheModel.modifiedby = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			reinstatementCacheModel.createDate = createDate.getTime();
		}
		else {
			reinstatementCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reinstatementCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reinstatementCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reinstatementCacheModel.firstName = getFirstName();

		String firstName = reinstatementCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			reinstatementCacheModel.firstName = null;
		}

		reinstatementCacheModel.lastName = getLastName();

		String lastName = reinstatementCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			reinstatementCacheModel.lastName = null;
		}

		reinstatementCacheModel.branchName = getBranchName();

		String branchName = reinstatementCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			reinstatementCacheModel.branchName = null;
		}

		reinstatementCacheModel.payrollNo = getPayrollNo();

		String payrollNo = reinstatementCacheModel.payrollNo;

		if ((payrollNo != null) && (payrollNo.length() == 0)) {
			reinstatementCacheModel.payrollNo = null;
		}

		reinstatementCacheModel.terminationReason = getTerminationReason();

		String terminationReason = reinstatementCacheModel.terminationReason;

		if ((terminationReason != null) && (terminationReason.length() == 0)) {
			reinstatementCacheModel.terminationReason = null;
		}

		reinstatementCacheModel.terminationCode = getTerminationCode();

		String terminationCode = reinstatementCacheModel.terminationCode;

		if ((terminationCode != null) && (terminationCode.length() == 0)) {
			reinstatementCacheModel.terminationCode = null;
		}

		reinstatementCacheModel.formerBranch = getFormerBranch();

		String formerBranch = reinstatementCacheModel.formerBranch;

		if ((formerBranch != null) && (formerBranch.length() == 0)) {
			reinstatementCacheModel.formerBranch = null;
		}

		reinstatementCacheModel.contractId = getContractId();

		String contractId = reinstatementCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			reinstatementCacheModel.contractId = null;
		}

		reinstatementCacheModel.entityId = getEntityId();

		String entityId = reinstatementCacheModel.entityId;

		if ((entityId != null) && (entityId.length() == 0)) {
			reinstatementCacheModel.entityId = null;
		}

		reinstatementCacheModel.approvalDate = getApprovalDate();

		String approvalDate = reinstatementCacheModel.approvalDate;

		if ((approvalDate != null) && (approvalDate.length() == 0)) {
			reinstatementCacheModel.approvalDate = null;
		}

		reinstatementCacheModel.comments = getComments();

		String comments = reinstatementCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			reinstatementCacheModel.comments = null;
		}

		reinstatementCacheModel.approverContractNumber =
			getApproverContractNumber();

		String approverContractNumber =
			reinstatementCacheModel.approverContractNumber;

		if ((approverContractNumber != null) &&
			(approverContractNumber.length() == 0)) {

			reinstatementCacheModel.approverContractNumber = null;
		}

		reinstatementCacheModel.agentVerdict = getAgentVerdict();

		String agentVerdict = reinstatementCacheModel.agentVerdict;

		if ((agentVerdict != null) && (agentVerdict.length() == 0)) {
			reinstatementCacheModel.agentVerdict = null;
		}

		reinstatementCacheModel.agentAction = getAgentAction();

		String agentAction = reinstatementCacheModel.agentAction;

		if ((agentAction != null) && (agentAction.length() == 0)) {
			reinstatementCacheModel.agentAction = null;
		}

		reinstatementCacheModel.processedFlag = getProcessedFlag();

		String processedFlag = reinstatementCacheModel.processedFlag;

		if ((processedFlag != null) && (processedFlag.length() == 0)) {
			reinstatementCacheModel.processedFlag = null;
		}

		reinstatementCacheModel.errorReason = getErrorReason();

		String errorReason = reinstatementCacheModel.errorReason;

		if ((errorReason != null) && (errorReason.length() == 0)) {
			reinstatementCacheModel.errorReason = null;
		}

		reinstatementCacheModel.assignmentStatus = getAssignmentStatus();

		String assignmentStatus = reinstatementCacheModel.assignmentStatus;

		if ((assignmentStatus != null) && (assignmentStatus.length() == 0)) {
			reinstatementCacheModel.assignmentStatus = null;
		}

		reinstatementCacheModel.capacity = getCapacity();

		String capacity = reinstatementCacheModel.capacity;

		if ((capacity != null) && (capacity.length() == 0)) {
			reinstatementCacheModel.capacity = null;
		}

		reinstatementCacheModel.positionId = getPositionId();

		String positionId = reinstatementCacheModel.positionId;

		if ((positionId != null) && (positionId.length() == 0)) {
			reinstatementCacheModel.positionId = null;
		}

		reinstatementCacheModel.orgId = getOrgId();

		String orgId = reinstatementCacheModel.orgId;

		if ((orgId != null) && (orgId.length() == 0)) {
			reinstatementCacheModel.orgId = null;
		}

		reinstatementCacheModel.historyStartDate = getHistoryStartDate();

		String historyStartDate = reinstatementCacheModel.historyStartDate;

		if ((historyStartDate != null) && (historyStartDate.length() == 0)) {
			reinstatementCacheModel.historyStartDate = null;
		}

		reinstatementCacheModel.oldOrgId = getOldOrgId();

		String oldOrgId = reinstatementCacheModel.oldOrgId;

		if ((oldOrgId != null) && (oldOrgId.length() == 0)) {
			reinstatementCacheModel.oldOrgId = null;
		}

		reinstatementCacheModel.oldPositionId = getOldPositionId();

		String oldPositionId = reinstatementCacheModel.oldPositionId;

		if ((oldPositionId != null) && (oldPositionId.length() == 0)) {
			reinstatementCacheModel.oldPositionId = null;
		}

		reinstatementCacheModel.contractEffectiveEndDate =
			getContractEffectiveEndDate();

		String contractEffectiveEndDate =
			reinstatementCacheModel.contractEffectiveEndDate;

		if ((contractEffectiveEndDate != null) &&
			(contractEffectiveEndDate.length() == 0)) {

			reinstatementCacheModel.contractEffectiveEndDate = null;
		}

		reinstatementCacheModel.applicationTye = getApplicationTye();

		String applicationTye = reinstatementCacheModel.applicationTye;

		if ((applicationTye != null) && (applicationTye.length() == 0)) {
			reinstatementCacheModel.applicationTye = null;
		}

		reinstatementCacheModel.applicationCategory = getApplicationCategory();

		String applicationCategory =
			reinstatementCacheModel.applicationCategory;

		if ((applicationCategory != null) &&
			(applicationCategory.length() == 0)) {

			reinstatementCacheModel.applicationCategory = null;
		}

		reinstatementCacheModel.firstapprover = getFirstapprover();

		String firstapprover = reinstatementCacheModel.firstapprover;

		if ((firstapprover != null) && (firstapprover.length() == 0)) {
			reinstatementCacheModel.firstapprover = null;
		}

		reinstatementCacheModel.secondapprover = getSecondapprover();

		String secondapprover = reinstatementCacheModel.secondapprover;

		if ((secondapprover != null) && (secondapprover.length() == 0)) {
			reinstatementCacheModel.secondapprover = null;
		}

		return reinstatementCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Reinstatement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Reinstatement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reinstatement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Reinstatement)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Reinstatement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Reinstatement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reinstatement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Reinstatement)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Reinstatement>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _reinstatementId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdby;
	private String _modifiedby;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private String _branchName;
	private String _payrollNo;
	private String _terminationReason;
	private String _terminationCode;
	private String _formerBranch;
	private String _contractId;
	private String _entityId;
	private String _approvalDate;
	private String _comments;
	private String _approverContractNumber;
	private String _agentVerdict;
	private String _agentAction;
	private String _processedFlag;
	private String _errorReason;
	private String _assignmentStatus;
	private String _capacity;
	private String _positionId;
	private String _orgId;
	private String _historyStartDate;
	private String _oldOrgId;
	private String _oldPositionId;
	private String _contractEffectiveEndDate;
	private String _applicationTye;
	private String _applicationCategory;
	private String _firstapprover;
	private String _secondapprover;
	private long _columnBitmask;
	private Reinstatement _escapedModel;

}
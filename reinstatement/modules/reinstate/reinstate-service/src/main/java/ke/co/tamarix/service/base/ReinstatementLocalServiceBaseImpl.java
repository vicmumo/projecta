/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ke.co.tamarix.service.base;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import ke.co.tamarix.model.Reinstatement;
import ke.co.tamarix.service.ReinstatementLocalService;
import ke.co.tamarix.service.persistence.ReinstatementPersistence;

/**
 * Provides the base implementation for the reinstatement local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ke.co.tamarix.service.impl.ReinstatementLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ke.co.tamarix.service.impl.ReinstatementLocalServiceImpl
 * @generated
 */
public abstract class ReinstatementLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements IdentifiableOSGiService, ReinstatementLocalService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>ReinstatementLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>ke.co.tamarix.service.ReinstatementLocalServiceUtil</code>.
	 */

	/**
	 * Adds the reinstatement to the database. Also notifies the appropriate model listeners.
	 *
	 * @param reinstatement the reinstatement
	 * @return the reinstatement that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Reinstatement addReinstatement(Reinstatement reinstatement) {
		reinstatement.setNew(true);

		return reinstatementPersistence.update(reinstatement);
	}

	/**
	 * Creates a new reinstatement with the primary key. Does not add the reinstatement to the database.
	 *
	 * @param reinstatementId the primary key for the new reinstatement
	 * @return the new reinstatement
	 */
	@Override
	@Transactional(enabled = false)
	public Reinstatement createReinstatement(long reinstatementId) {
		return reinstatementPersistence.create(reinstatementId);
	}

	/**
	 * Deletes the reinstatement with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reinstatementId the primary key of the reinstatement
	 * @return the reinstatement that was removed
	 * @throws PortalException if a reinstatement with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Reinstatement deleteReinstatement(long reinstatementId)
		throws PortalException {

		return reinstatementPersistence.remove(reinstatementId);
	}

	/**
	 * Deletes the reinstatement from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reinstatement the reinstatement
	 * @return the reinstatement that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Reinstatement deleteReinstatement(Reinstatement reinstatement) {
		return reinstatementPersistence.remove(reinstatement);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			Reinstatement.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return reinstatementPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>ke.co.tamarix.model.impl.ReinstatementModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return reinstatementPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>ke.co.tamarix.model.impl.ReinstatementModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return reinstatementPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return reinstatementPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return reinstatementPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public Reinstatement fetchReinstatement(long reinstatementId) {
		return reinstatementPersistence.fetchByPrimaryKey(reinstatementId);
	}

	/**
	 * Returns the reinstatement matching the UUID and group.
	 *
	 * @param uuid the reinstatement's UUID
	 * @param groupId the primary key of the group
	 * @return the matching reinstatement, or <code>null</code> if a matching reinstatement could not be found
	 */
	@Override
	public Reinstatement fetchReinstatementByUuidAndGroupId(
		String uuid, long groupId) {

		return reinstatementPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the reinstatement with the primary key.
	 *
	 * @param reinstatementId the primary key of the reinstatement
	 * @return the reinstatement
	 * @throws PortalException if a reinstatement with the primary key could not be found
	 */
	@Override
	public Reinstatement getReinstatement(long reinstatementId)
		throws PortalException {

		return reinstatementPersistence.findByPrimaryKey(reinstatementId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(reinstatementLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Reinstatement.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reinstatementId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			reinstatementLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Reinstatement.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"reinstatementId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(reinstatementLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Reinstatement.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reinstatementId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<Reinstatement>() {

				@Override
				public void performAction(Reinstatement reinstatement)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, reinstatement);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(Reinstatement.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return reinstatementLocalService.deleteReinstatement(
			(Reinstatement)persistedModel);
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return reinstatementPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the reinstatements matching the UUID and company.
	 *
	 * @param uuid the UUID of the reinstatements
	 * @param companyId the primary key of the company
	 * @return the matching reinstatements, or an empty list if no matches were found
	 */
	@Override
	public List<Reinstatement> getReinstatementsByUuidAndCompanyId(
		String uuid, long companyId) {

		return reinstatementPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of reinstatements matching the UUID and company.
	 *
	 * @param uuid the UUID of the reinstatements
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of reinstatements
	 * @param end the upper bound of the range of reinstatements (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching reinstatements, or an empty list if no matches were found
	 */
	@Override
	public List<Reinstatement> getReinstatementsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<Reinstatement> orderByComparator) {

		return reinstatementPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the reinstatement matching the UUID and group.
	 *
	 * @param uuid the reinstatement's UUID
	 * @param groupId the primary key of the group
	 * @return the matching reinstatement
	 * @throws PortalException if a matching reinstatement could not be found
	 */
	@Override
	public Reinstatement getReinstatementByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return reinstatementPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the reinstatements.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>ke.co.tamarix.model.impl.ReinstatementModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of reinstatements
	 * @param end the upper bound of the range of reinstatements (not inclusive)
	 * @return the range of reinstatements
	 */
	@Override
	public List<Reinstatement> getReinstatements(int start, int end) {
		return reinstatementPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of reinstatements.
	 *
	 * @return the number of reinstatements
	 */
	@Override
	public int getReinstatementsCount() {
		return reinstatementPersistence.countAll();
	}

	/**
	 * Updates the reinstatement in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param reinstatement the reinstatement
	 * @return the reinstatement that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Reinstatement updateReinstatement(Reinstatement reinstatement) {
		return reinstatementPersistence.update(reinstatement);
	}

	/**
	 * Returns the reinstatement local service.
	 *
	 * @return the reinstatement local service
	 */
	public ReinstatementLocalService getReinstatementLocalService() {
		return reinstatementLocalService;
	}

	/**
	 * Sets the reinstatement local service.
	 *
	 * @param reinstatementLocalService the reinstatement local service
	 */
	public void setReinstatementLocalService(
		ReinstatementLocalService reinstatementLocalService) {

		this.reinstatementLocalService = reinstatementLocalService;
	}

	/**
	 * Returns the reinstatement persistence.
	 *
	 * @return the reinstatement persistence
	 */
	public ReinstatementPersistence getReinstatementPersistence() {
		return reinstatementPersistence;
	}

	/**
	 * Sets the reinstatement persistence.
	 *
	 * @param reinstatementPersistence the reinstatement persistence
	 */
	public void setReinstatementPersistence(
		ReinstatementPersistence reinstatementPersistence) {

		this.reinstatementPersistence = reinstatementPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"ke.co.tamarix.model.Reinstatement", reinstatementLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"ke.co.tamarix.model.Reinstatement");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ReinstatementLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Reinstatement.class;
	}

	protected String getModelClassName() {
		return Reinstatement.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = reinstatementPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@BeanReference(type = ReinstatementLocalService.class)
	protected ReinstatementLocalService reinstatementLocalService;

	@BeanReference(type = ReinstatementPersistence.class)
	protected ReinstatementPersistence reinstatementPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}